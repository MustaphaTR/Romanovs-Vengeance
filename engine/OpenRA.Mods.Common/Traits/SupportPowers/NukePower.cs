#region Copyright & License Information
/*
 * Copyright (c) The OpenRA Developers and Contributors
 * This file is part of OpenRA, which is free software. It is made
 * available to you under the terms of the GNU General Public License
 * as published by the Free Software Foundation, either version 3 of
 * the License, or (at your option) any later version. For more
 * information, see COPYING.
 */
#endregion

using System.Collections.Generic;
using System.Linq;
using OpenRA.GameRules;
using OpenRA.Graphics;
using OpenRA.Mods.Common.Effects;
using OpenRA.Mods.Common.Graphics;
using OpenRA.Primitives;
using OpenRA.Traits;

namespace OpenRA.Mods.Common.Traits
{
	public class NukePowerInfo : SupportPowerInfo
	{
		// [WeaponReference]
		[FieldLoader.Require]
		[Desc("Weapon to use for the impact.")]
		public readonly Dictionary<int, string> MissileWeapons = new();

		[Desc("Delay (in ticks) after launch until the missile is spawned.")]
		public readonly int MissileDelay = 0;

		[Desc("Image to use for the missile.")]
		public readonly string MissileImage = null;

		[SequenceReference(nameof(MissileImage), allowNullImage: true)]
		[Desc("Sprite sequence for the ascending missile.")]
		public readonly string MissileUp = "up";

		[SequenceReference(nameof(MissileImage), allowNullImage: true)]
		[Desc("Sprite sequence for the descending missile.")]
		public readonly string MissileDown = "down";

		[Desc("Offset from the actor the missile spawns on.")]
		public readonly WVec SpawnOffset = WVec.Zero;

		[Desc("Altitude offset from the target position at which the warhead should detonate.")]
		public readonly WDist DetonationAltitude = WDist.Zero;

		[Desc("Should nuke missile projectile be removed on detonation above ground.",
			"'False' will make the missile continue until it hits the ground and disappears (without triggering another explosion).")]
		public readonly bool RemoveMissileOnDetonation = true;

		[PaletteReference(nameof(IsPlayerPalette))]
		[Desc("Palette to use for the missile weapon image.")]
		public readonly string MissilePalette = "effect";

		[Desc("Custom palette is a player palette BaseName.")]
		public readonly bool IsPlayerPalette = false;

		[Desc("Trail animation.")]
		public readonly string TrailImage = null;

		[SequenceReference(nameof(TrailImage), allowNullImage: true)]
		[Desc("Loop a randomly chosen sequence of TrailImage from this list while this projectile is moving.")]
		public readonly string[] TrailSequences = [];

		[Desc("Interval in ticks between each spawned Trail animation.")]
		public readonly int TrailInterval = 1;

		[Desc("Delay in ticks until trail animation is spawned.")]
		public readonly int TrailDelay = 1;

		[PaletteReference(nameof(TrailUsePlayerPalette))]
		[Desc("Palette used to render the trail sequence.")]
		public readonly string TrailPalette = "effect";

		[Desc("Use the Player Palette to render the trail sequence.")]
		public readonly bool TrailUsePlayerPalette = false;

		[Desc("Travel time - split equally between ascent and descent.")]
		public readonly int FlightDelay = 400;

		[Desc("Visual ascent velocity in WDist / tick.")]
		public readonly WDist FlightVelocity = new(512);

		[Desc("Descend immediately on the target.")]
		public readonly bool SkipAscent = false;

		[Desc("Amount of time before detonation to remove the beacon.")]
		public readonly int BeaconRemoveAdvance = 25;

		[Desc("Range of cells the camera should reveal around target cell.")]
		public readonly WDist CameraRange = WDist.Zero;

		[Desc("Can the camera reveal shroud generated by the `" + nameof(CreatesShroud) + "` trait?")]
		public readonly bool RevealGeneratedShroud = true;

		[Desc("Reveal cells to players with these relationships only.")]
		public readonly PlayerRelationship CameraRelationships = PlayerRelationship.Ally;

		[Desc("Amount of time before detonation to spawn the camera.")]
		public readonly int CameraSpawnAdvance = 25;

		[Desc("Amount of time after detonation to remove the camera.")]
		public readonly int CameraRemoveDelay = 25;

		[Desc("Range circle color.")]
		public readonly Color CircleColor = Color.FromArgb(128, Color.Red);

		[Desc("Use player color for circle rather than `CircleColor`.")]
		public readonly bool CircleUsePlayerColor = false;

		[Desc("Range circle width in pixel.")]
		public readonly float CircleWidth = 1;

		[Desc("Range circle border color.")]
		public readonly Color CircleBorderColor = Color.FromArgb(64, Color.Red);

		[Desc("Range circle border width in pixel.")]
		public readonly float CircleBorderWidth = 3;

		[Desc("Render circles based on these distance ranges while targeting.")]
		public readonly Dictionary<int, WDist[]> CircleRanges;

		public readonly Dictionary<int, WeaponInfo> WeaponInfos = new();

		public override object Create(ActorInitializer init) { return new NukePower(init.Self, this); }
		public override void RulesetLoaded(Ruleset rules, ActorInfo ai)
		{
			if (!string.IsNullOrEmpty(TrailImage) && TrailSequences.Length == 0)
				throw new YamlException("At least one entry in TrailSequences must be defined when TrailImage is defined.");

			foreach (var missileWeapon in MissileWeapons)
			{
				var weaponToLower = missileWeapon.Value.ToLowerInvariant();
				if (!rules.Weapons.TryGetValue(weaponToLower, out var weaponInfo))
					throw new YamlException($"Weapons Ruleset does not contain an entry '{weaponToLower}'");

				if (!WeaponInfos.ContainsKey(missileWeapon.Key))
					WeaponInfos.Add(missileWeapon.Key, rules.Weapons[weaponToLower]);
			}

			base.RulesetLoaded(rules, ai);
		}
	}

	public class NukePower : SupportPower
	{
		public new readonly NukePowerInfo Info;
		BodyOrientation body;

		public NukePower(Actor self, NukePowerInfo info)
			: base(self, info)
		{
			Info = info;
		}

		protected override void Created(Actor self)
		{
			body = self.TraitOrDefault<BodyOrientation>();
			base.Created(self);
		}

		public override void Activate(Actor self, Order order, SupportPowerManager manager)
		{
			base.Activate(self, order, manager);
			PlayLaunchSounds();

			Activate(self, order.Target.CenterPosition);
		}

		public void Activate(Actor self, WPos targetPosition)
		{
			var level = GetLevel();
			if (level == 0)
				return;

			var palette = Info.IsPlayerPalette ? Info.MissilePalette + self.Owner.InternalName : Info.MissilePalette;
			var skipAscent = Info.SkipAscent || body == null;
			var launchPos = skipAscent ? WPos.Zero : self.CenterPosition + body.LocalToWorld(Info.SpawnOffset);

			var weaponInfo = Info.WeaponInfos.First(wi => wi.Key == level).Value;
			var missile = new NukeLaunch(self.Owner, Info.MissileImage, weaponInfo, palette, Info.MissileUp, Info.MissileDown,
				launchPos,
				targetPosition, Info.DetonationAltitude, Info.RemoveMissileOnDetonation,
				Info.FlightVelocity, Info.MissileDelay, Info.FlightDelay, skipAscent,
				Info.TrailImage, Info.TrailSequences, Info.TrailPalette, Info.TrailUsePlayerPalette, Info.TrailDelay, Info.TrailInterval);

			self.World.AddFrameEndTask(w => w.Add(missile));

			if (Info.CameraRange != WDist.Zero)
			{
				var type = Info.RevealGeneratedShroud ? Shroud.SourceType.Visibility
					: Shroud.SourceType.PassiveVisibility;

				self.World.AddFrameEndTask(w => w.Add(new RevealShroudEffect(targetPosition, Info.CameraRange, type, self.Owner, Info.CameraRelationships,
					Info.FlightDelay - Info.CameraSpawnAdvance, Info.CameraSpawnAdvance + Info.CameraRemoveDelay)));
			}

			if (Info.DisplayBeacon)
			{
				var beacon = new Beacon(
					self.Owner,
					targetPosition,
					Info.BeaconPaletteIsPlayerPalette,
					Info.BeaconPalette,
					Info.BeaconImage,
					Info.BeaconPosters.First(bp => bp.Key == level).Value,
					Info.BeaconPosterPalette,
					Info.BeaconSequence,
					Info.ArrowSequence,
					Info.CircleSequence,
					Info.ClockSequence,
					() => missile.FractionComplete,
					Info.BeaconDelay,
					Info.FlightDelay - Info.BeaconRemoveAdvance);

				self.World.AddFrameEndTask(w => w.Add(beacon));
			}
		}

		public override void SelectTarget(Actor self, string order, SupportPowerManager manager)
		{
			self.World.OrderGenerator = new SelectNukePowerTarget(order, manager, this, MouseButton.Left);
		}
	}

	public class SelectNukePowerTarget : SelectGenericPowerTarget
	{
		readonly NukePower power;

		public SelectNukePowerTarget(string order, SupportPowerManager manager, NukePower power, MouseButton button)
			: base(order, manager, power.Info, button)
		{
			this.power = power;
		}

		protected override IEnumerable<IRenderable> RenderAnnotations(WorldRenderer wr, World world)
		{
			if (power.Info.CircleRanges == null)
				yield break;

			var level = power.GetLevel();
			if (level == 0)
				yield break;

			var centerPosition = wr.World.Map.CenterOfCell(wr.Viewport.ViewToWorld(Viewport.LastMousePos));
			foreach (var range in power.Info.CircleRanges[level])
				yield return new RangeCircleAnnotationRenderable(
					centerPosition,
					range,
					0,
					power.Info.CircleUsePlayerColor ? power.Self.Owner.Color : power.Info.CircleColor,
					power.Info.CircleWidth,
					power.Info.CircleBorderColor,
					power.Info.CircleBorderWidth);
		}
	}
}
